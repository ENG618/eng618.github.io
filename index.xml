<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Eric Garcia</title><link>https://eng618.github.io/</link><description>Recent content in Home on Eric Garcia</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://eng618.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://eng618.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/about/</guid><description>Introduction My name is Eric Garcia. I am a graduate from Full Sail University with a Bachelors Degree in Mobile Development (MDVBS). I am currently employed at IBM as a Software Engineer. I am currently working on Analytics &amp;amp; Enterprise Integration as part of the API Connect team.
If you would like to see some of the projects and applications I have worked on this can be found in my Portfolio</description></item><item><title>Under Construction</title><link>https://eng618.github.io/sections/simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/sections/simple/</guid><description>I&amp;rsquo;m currently working towards converting this Jekyll site to Hugo. Please check back for updates.</description></item><item><title>Amending a Commit Message</title><link>https://eng618.github.io/notes/git/amending_commit_message/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/amending_commit_message/</guid><description>To open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:
git commit --amend …however, this can make multi-line commit messages or small corrections more cumbersome to enter.
git commit --amend -m &amp;#34;New commit message&amp;#34; Make sure you don&amp;rsquo;t have any working copy changes before doing this or they can get committed too.</description></item><item><title>Android</title><link>https://eng618.github.io/notes/android/android/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/android/android/</guid><description>Eclipse Download the ADT Plugin Start Eclipse, then select Help &amp;gt; Install New Software. Click Add, in the top-right corner. In the Add Repository dialog that appears, enter &amp;ldquo;ADT Plugin&amp;rdquo; for the Name and the following URL for the Location: https://dl-ssl.google.com/android/eclipse/ Click OK. If you have trouble acquiring the plugin, try using &amp;ldquo;http&amp;rdquo; in the Location URL, instead of &amp;ldquo;https&amp;rdquo; (https is preferred for security reasons). In the Available Software dialog, select the checkbox next to Developer Tools and click Next.</description></item><item><title>Background Processes</title><link>https://eng618.github.io/notes/osx/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/osx/background/</guid><description>Running processes in the background When running a command add &amp;amp; at the end and this will cause that process to run in the background
To see a list of background jobs use:
jobs To kill a background process use:
kill %&amp;lt;job number&amp;gt; To bring a background process to the foreground use:
fg %&amp;lt;job number&amp;gt; Java background If a MFPF server fails to start (due to process already running)
You can use lsof -i:&amp;lt;port&amp;gt; to list processes on a specific port.</description></item><item><title>Docker</title><link>https://eng618.github.io/notes/docker/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/docker/docker/</guid><description>Jump to:
TOC {:toc} Overview Useful notes and references revolving around docker.</description></item><item><title>Excluding Files</title><link>https://eng618.github.io/notes/git/excluding_files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/excluding_files/</guid><description>Ignoring tracked files in your local repo git update-index --skip-worktree SOME_FILE or
git update-index --assume-unchanged SOME_FILE To undo assume unchanged
git update-index --no-assume-unchanged SOME_FILE If using assume-unchanged you can add the following to your ~/.gitconfig
This will allow you to use the alias git ignored to list all excluded files
[alias] ignored = !git ls-files -v | grep &amp;#34;^[[:lower:]]&amp;#34; Ignoring un-tracked files in your local repo Untested
If you ever want to ignore a file from git, but don&amp;rsquo;t want to add it to the .</description></item><item><title>git</title><link>https://eng618.github.io/notes/git/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/git/</guid><description>Jump to:
TOC {:toc} Overview This page is designed to unify all the tips and tricks associated with using git. Please feel free to modify and update as needed.
Amending a Commit Message Changing a commit message can cause lots of problems if not handled correctly. Only use the following if absolutely necessary.
Local commits To open your editor, allowing you to change the commit message of the most recent commit:</description></item><item><title>Git Branching</title><link>https://eng618.github.io/notes/git/branching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/branching/</guid><description>I follow git branching naming convention outline in this gist
List all branches including remotes
git branch -a Resetting local branch to match remote Setting your branch to exactly match the remote branch can be done in two steps:
git fetch origin git reset --hard origin/master If you want to save your current branch&amp;rsquo;s state before doing this (just in case), you can do:
git commit -a -m &amp;#34;Saving my work, just in case&amp;#34; git branch my-saved-work Tip: Also see git clean</description></item><item><title>Git Clean</title><link>https://eng618.github.io/notes/git/clean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/clean/</guid><description>Perform a “dry run” of git clean. This will show you which files are going to be removed without actually doing it.
git clean -n Remove untracked files from the current directory. The -f (force) flag is required unless the clean.requireForce configuration option is set to false (it&amp;rsquo;s true by default). This will not remove untracked folders or files specified by .gitignore.
git clean -f Remove untracked files, but limit the operation to the specified path.</description></item><item><title>Git Diff</title><link>https://eng618.github.io/notes/git/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/diff/</guid><description>Simply use git diff and a file name to check difference between commited and non staged changes
git diff FILE_NAME If you need to verify the difference of a file that is already staged use the following
git diff --staged FILE_NAME Git diff with opendiff Source
mkdir ~/bin/ touch ~/bin/git-diff.sh The contents of the file will look like this:
#!/bin/sh /usr/bin/opendiff &amp;#34;$2&amp;#34; &amp;#34;$5&amp;#34; -merge &amp;#34;$1&amp;#34; Once the script has been made, you’ll want it to be executable</description></item><item><title>GREP</title><link>https://eng618.github.io/notes/osx/unix-grep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/osx/unix-grep/</guid><description>Using grep to search a file (ex: *.log), and save to and new file (ex: NEW_FILE.log)
grep &amp;#34;SEARCH_TERM&amp;#34; PATH_TO_FILE_TO_GREP &amp;gt; PATH_TO_NEW_FILE The below command will remove all files in the current directory except the ones with .log in their filename.
ls | grep -v &amp;#34;.log&amp;#34; | xargs rm Flags Use the -c flag to count the number of occurrences of search in a file.
```bash grep -c &amp;quot;SEARCH_TERM&amp;quot; FILE.</description></item><item><title>Help</title><link>https://eng618.github.io/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/help/</guid><description>Help</description></item><item><title>Homebrew</title><link>https://eng618.github.io/notes/osx/homebrew/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/osx/homebrew/</guid><description>When trying to install using homebrew User does not have permission to write to /usr/local/Cellar and throws following error.
Error: Cannot write to /usr/local/Cellar Attempting to sudo it refuses with following error.
Cowardly refusing to `sudo brew install&amp;#39; You somehow have limited permissions to /usr/local/Cellar. Brew doesn&amp;rsquo;t like to install with sudo which is why it refuses. Correct the issue with the following commands:
Check the permissions:
ls -ld /usr/local/Cellar Open them up for writing:</description></item><item><title>Jekyll</title><link>https://eng618.github.io/notes/development/jekyll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/development/jekyll/</guid><description>source
Specifying a :path attribute will install the gem from that path on your local machine. gem &amp;quot;&amp;lt;gem-name&amp;gt;&amp;quot;, :path =&amp;gt; &amp;quot;&amp;lt;full-local-path&amp;gt;&amp;quot; Alternately, specifying a :git attribute will install the gem from a remote git repository. &amp;#34;git://github.com/&amp;lt;github-username&amp;gt;/&amp;lt;github-repo&amp;gt;.git&amp;#34; # ...or at a specific SHA-1 ref gem &amp;#34;&amp;lt;gem-name&amp;gt;&amp;#34;, :git =&amp;gt; &amp;#34;git://github.com/&amp;lt;github-username&amp;gt;/&amp;lt;github-repo&amp;gt;.git&amp;#34;, :ref =&amp;gt; &amp;#34;bf648a070c&amp;#34; # ...or branch gem &amp;#34;&amp;lt;gem-name&amp;gt;&amp;#34;, :git =&amp;gt; &amp;#34;git://github.com/&amp;lt;github-username&amp;gt;/&amp;lt;github-repo&amp;gt;.git&amp;#34;, :branch =&amp;gt; &amp;#34;jruby&amp;#34; # ...or tag gem &amp;#34;&amp;lt;gem-name&amp;gt;&amp;#34;, :git =&amp;gt; &amp;#34;git://github.</description></item><item><title>License</title><link>https://eng618.github.io/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/license/</guid><description>Below are links to license or where images can be found.
images/site-header full image</description></item><item><title>Memory Vault</title><link>https://eng618.github.io/mobile_apps/memory_vault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/mobile_apps/memory_vault/</guid><description>Overview Memory Vault is a cross platform app that keeps all your memories safe and synced between all your Android and iOS devices. Your memories are saved in the cloud so they are always safe&amp;hellip;even if your phone isn&amp;rsquo;t.
Available for Android iOS</description></item><item><title>Privacy</title><link>https://eng618.github.io/privacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/privacy/</guid><description>Privacy &amp;amp; Terms</description></item><item><title>Resolving Merge Conflicts</title><link>https://eng618.github.io/notes/git/merge_conflicts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/merge_conflicts/</guid><description>Local changes to same files To resolve merge conflicts with error.
error: Your local changes to the following files would be overwritten by merge: To stash entire working tree
git stash save --keep-index Now you will be able to merge branch successfully
If you do not need your local changes you can simple drop the stash
git stash drop or&amp;hellip;if you need your changes you can attempt to process them in now using pop</description></item><item><title>Reverting last commit</title><link>https://eng618.github.io/notes/git/undo-last-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/undo-last-commit/</guid><description>source
git commit -m &amp;#34;Something terribly misguided&amp;#34; git reset --soft HEAD~ &amp;lt;&amp;lt; edit files as necessary &amp;gt;&amp;gt; git add ... git commit -m &amp;#34;New commit message&amp;#34; git commit -c ORIG_HEAD source
Delete the most recent commit, keeping the work you&amp;rsquo;ve done:
git reset --soft HEAD~1
Delete the most recent commit, destroying the work you&amp;rsquo;ve done:
git reset --hard HEAD~1</description></item><item><title>Setting up your OSX development environment</title><link>https://eng618.github.io/notes/osx/dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/osx/dev-environment/</guid><description>Table of Contents:
TOC {:toc} Overview In this document we will explore different aspects of setting up your Macbook for for development purposes. This includes but is not limited to setting up some essential software that will enable you to install some core aspects of MobileFirst.
Homebrew I like to use sudu as little as possible especially when installing software. To avoid this I use Home Brew for as much software installation as possible.</description></item><item><title>Sublime Text</title><link>https://eng618.github.io/notes/osx/sublime_text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/osx/sublime_text/</guid><description>in .bash_profile
export PATH=/bin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:$PATH export EDITOR=&amp;#39;subl -w&amp;#39; Create symbolic link from terminal
ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl Reference: Stack Overflow: Opening Sublime Text on command line as subl on Mac OS?</description></item><item><title>Updating .gitignore</title><link>https://eng618.github.io/notes/git/gitignore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/gitignore/</guid><description>Untracking a single file To untrack a single file that has already been added/initialized to your repository, i.e., stop tracking the file but not delete it from your system use:
git rm --cached filename Untracking all files To untrack every file that is now in your .gitignore:
Commit any outstanding code changes, and then, run this command:
git commit -m &amp;#34;Commit message&amp;#34; This removes any changed files from the index(staging area), then just run:</description></item><item><title>Useful Commands</title><link>https://eng618.github.io/notes/osx/useful_commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/osx/useful_commands/</guid><description>Jump to:
TOC {:toc} Bash Profile Use source to update bash_profile without relaunching terminal
source ~/.bash_profile Open with application Can also be used with . for the file path to open current directory* open -a &amp;#34;PROVIDED_APPLICATION&amp;#34; FILE/PATH Scripts This section is designated to helping you work with and create scripts.
Setting script permissions SourceAllowing everyone to execute the script, enter:
chmod +x &amp;lt;script&amp;gt;.sh
Set the permissions for the user and the group to read and execute only (no write permission), enter:</description></item><item><title>Working with Forked Repositories</title><link>https://eng618.github.io/notes/git/forking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eng618.github.io/notes/git/forking/</guid><description>Source
When needing to work with a new branch on a forked repo you have to create a new branch in your local fork that references that branch. This can be accomplished by:
git remote add theirUsername git@github.com:theirUsername/repoName.git git fetch theirUsername git checkout -b my_name_for_their_branch theirUsername/theirBranch Example Following directions for Keeping your fork in sync for the DevCetner.
In this example I will be demonstrating creating a GA branch from upstream, in my local environment.</description></item></channel></rss>